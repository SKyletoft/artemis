lower_case =  { 'a'..'z' | "å" | "ä" | "ö" }
upper_case =  { 'A'..'Z' | "Å" | "Ä" | "Ö" }
digit      =  { '0'..'9' }
whitespace = _{ " " | "\t" | "\r" | "\n" }

ws = _{ whitespace* }

var_name  = { lower_case ~ (lower_case | digit | "_")* }
type_name = {
	"mut "? ~
	(
		(upper_case ~ (upper_case | lower_case | digit)*) |
		"ℕ" |
		"ℝ" |
		"ℤ"
	)
}

dot   = { "." }
plus  = { "+" }
minus = { "-" }
delta = { "δ" }
times = { "*" | "×" | "·" }
div   = { "/" | "÷" }
exp   = { "^" }
not   = { "¬" }
and   = { "Λ" | "∧" | "⋀" }
or    = { "V" | "∨" | "⋁" }

integer = { (plus | minus)? ~ digit+ }
float   = { (plus | minus)? ~ digit+ ~ dot ~ digit* }
boolean = { "true" | "false" }

declaration = { var_name ~ ws ~ ":" ~ ws ~ type_name? ~ ws ~ "=" ~ ws ~ subexpr }
assignment  = { var_name ~ ws ~ "=" ~ ws ~ subexpr }

function_call = { var_name ~ "(" ~ ((subexpr ~ ",")* ~ subexpr)* ~ ")" }

term     = { float | integer | boolean | "(" ~ subexpr ~ ")" | block | if_expr | var_name }
operator = { exp | times | div | plus | minus | delta }

if_expr = { "if" ~ ws ~ subexpr ~ ws ~ block ~ ws ~ "else" ~ ws ~ (block | if_expr) }
subexpr = { ws ~ ( term ~ (ws ~ operator ~ ws ~ term)* ) }
expr    = { declaration | assignment | subexpr }

fn_keyword = { "\\" | "λ" }
argument   = { var_name ~ ws ~ ":" ~ ws ~ type_name }

function_definition = {
	fn_keyword ~ ws ~ var_name ~ ws ~ "(" ~
	((argument ~ ws ~ "," ~ ws)* ~ argument)* ~
	")" ~ ws ~ ("->" | "→") ~ ws ~ type_name ~ ws ~ block
}
block = { "{" ~ ws ~ (expr ~ (("\n" | ";"+) ~ expr)*) ~ ws ~ "}" }
