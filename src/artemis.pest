lower_case =  { 'a'..'z' | "å" | "ä" | "ö" }
upper_case =  { 'A'..'Z' | "Å" | "Ä" | "Ö" }
digit      =  { '0'..'9' }
whitespace = _{ (" " | "\t" | "\r" | "\n")+ }

ws = _{ whitespace? }

var_name     = { lower_case ~ (lower_case | digit | "_")* }
type_name    = { (mutable ~ whitespace)? ~ raw_type }
mutable      = { "mut" }
raw_type     = { native_types | struct_name | unit | tuple_type }
native_types = { "ℕ" | "ℝ" | "ℤ" | "𝔹" }
struct_name  = { upper_case ~ (upper_case | lower_case | digit)* }
tuple_type   = { "(" ~ ws ~ type_name ~ (ws ~ "," ~ ws ~ type_name)+ ~ ws ~ ")" }

dot   = { "." }
plus  = { "+" }
minus = { "-" }
delta = { "δ" }
times = { "*" | "×" | "·" }
div   = { "/" | "÷" }
exp   = { "^" }
not   = { "¬" }
and   = { "Λ" | "∧" | "⋀" }
or    = { "V" | "∨" | "⋁" }
xor   = { "⊕" | "⊻" | "⨁" }

string  = ${ "\"" ~ inner_s ~ "\"" }
char    =  { "'" ~ single_char ~ "'" }

inner_s     = @{ single_char* }
single_char =  {
	!("\"" | "\\") ~ ANY
	| "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
	| "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

declaration = { var_name ~ ws ~ ":" ~ ws ~ type_name? ~ ws ~ "=" ~ ws ~ subexpr }
assignment  = { var_name ~ ws ~ operator? ~ "=" ~ ws ~ subexpr }

function_call = { var_name ~ "(" ~ ws ~ ((subexpr ~ ",")* ~ ws ~ subexpr)* ~ ws ~ ")" }

term = {
	float
	| integer
	| boolean
	| unit
	| tuple
	| "(" ~ ws ~ subexpr ~ ws ~ ")"
	| block
	| if_expr
	| function_call
	| string
	| char
	| var_name
}
operator = { exp | times | div | plus | minus | delta }

if_expr = { "if" ~ ws ~ subexpr ~ ws ~ block ~ ws ~ "else" ~ ws ~ (block | if_expr) }
subexpr = { term ~ (ws ~ operator ~ ws ~ term)* }
expr    = { declaration | assignment | subexpr }

fn_keyword = { "\\" | "λ" }
argument   = { var_name ~ ws ~ ":" ~ ws ~ type_name }

function_definition = {
	fn_keyword ~ ws ~ var_name ~ ws ~ "(" ~ ws ~
	((argument ~ ws ~ "," ~ ws)* ~ argument)* ~ ws ~
	")" ~ ws ~ (("->" | "→") ~ ws ~ raw_type)? ~ ws ~ block
}
block = { "{" ~ ws ~ (expr ~ (("\n" | "\r\n" | ";")+ ~ ws ~ expr)*) ~ ws ~ "}" }
