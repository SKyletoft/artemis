Typechecking
	casting
		Primitives <-> Primitives
		Objects -> Primitives
		Primitives -/> Objects
		Objects -/> Objects
	C FFI types
		Probably just int64_t, uint64_t, double and void*
Syntax
	allow if {} as if {} else {default}
	arrays
	structs
	enums
	piping with |> and <|
		two args with ||>?
		map with ]>? ]=?
		fold with `arr ]> default func`?
			[> for right and ]> for left?
	partial application with f[x, y] and even f[_, y]
	enforce referential transparency by library design, making everything with a side effect require an environment token (ZST given by the main arguments)
	extern function declarations
	modules
	anonymous functions for use in functions that take functions and to use folds as for loops
	range syntax
		from..to?
Formatter
Linker
	Just rely on mold for now
GC
	Handle pointers to mid-array

JS backend?

The bad ideas
	Arbirtary base int literals
		1011b2 == 11b10
		ABb16 == 171b10
		34b5 == 19b10

To investigate
	Must all loops be folds?
		Reasonable syntax
			Implicit removal of the fold start value for () returns?
		What new greek letter for the `for` keyword
	Merging basic blocks
		Keep all existing context?
			Keep register counts but not names
	Replace all errors with error messages with a unique enum variant (there's a crate for deriving Error apparently)

