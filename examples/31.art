type Foo = ℝ | 𝔹 | { a: ℕ, b: ℕ }

λf (foo: Foo) → ℕ = case foo
	| 1              → 1
	| true           → 2
	| { a: 0, b: 0 } → 0
	| { a, b }       → a

λg (xs: [ℤ]) → ℤ = case xs
	| [0, 1, 2, ...] → 3
	| [a, b, c, ...] → a + b + c
	| [a, ..., c]    → a + c
	| [a, b @ ...]   → a + g(b)

