lower_case =  { 'a'..'z' | "å" | "ä" | "ö" }
upper_case =  { 'A'..'Z' | "Å" | "Ä" | "Ö" }
digit      =  { '0'..'9' }
whitespace = _{ (" " | "\t" | "\r" | "\n")+ }
greek      =  {
	"α" | "β" | "Γ" | "γ" | "ε" | "ζ" | "η" | "Θ" | "θ" | "ι" | "Κ" |
	"κ" | "μ" | "ν" | "Ξ" | "ξ" | "Π" | "π" | "ρ" | "Σ" | "σ" | "ς" |
	"τ" | "υ" | "Φ" | "φ" | "Χ" | "χ" | "Ψ" | "ψ" | "Ω" | "ω"
}

large_metric_prefix = { "D" | "da"| "h" | "k" | "M" | "G" | "T" | "P" | "E" | "Z" | "Y" }
small_metric_prefix = { "d" | "c" | "m" | "μ" | "u" | "n" | "p" | "f" | "a" | "z" | "y" }
metrix_prefix       = { small_metric_prefix | large_metric_prefix }
binary_prefix       = { "ki" | "Mi" | "Gi" | "Ti" | "Pi" | "Ei" | "Zi" | "Yi" }

ws = _{ whitespace? }

var_name     = { (lower_case ~ (lower_case | digit | "_")*) | greek }
type_name    = { (mutable ~ whitespace)? ~ raw_type }
mutable      = { "mut" }
raw_type     = { native_types | struct_name | unit | tuple_type }
native_types = { "ℕ" | "ℝ" | "ℤ" | "𝔹" }
struct_name  = { upper_case ~ (upper_case | lower_case | digit)* }
tuple_type   = { "(" ~ ws ~ type_name ~ (ws ~ "," ~ ws ~ type_name)+ ~ ws ~ ")" }

dot   = { "." | "`dot`" }
plus  = { "+" | "`add`" }
minus = { "-" | "`sub`" }
delta = { "δ" | "`delta`" }
times = { "*" | "×" | "·" | "`mul`" }
div   = { "/" | "÷" | "`div`" }
exp   = { "^" | "`exp`" }
not   = { "¬" | "`not`" }
and   = { "Λ" | "∧" | "⋀" | "`and`" }
or    = { "V" | "∨" | "⋁" | "`or`" }
xor   = { "⊕" | "⊻" | "⨁" | "(+)" | "`xor`" }

integer =  { (plus | minus)? ~ digit+ ~ (metrix_prefix | binary_prefix)? }
float   =  { (plus | minus)? ~ digit+ ~ dot ~ digit* ~ (metrix_prefix | binary_prefix)? }
boolean =  { "𝕋" | "𝔽" | "true" | "false" }
unit    =  { "(" ~ ws ~ ")" }
tuple   =  { "(" ~ ws ~ subexpr ~ (ws ~ "," ~ ws ~ subexpr)+ ~ ws ~ ")" }
string  = ${ "\"" ~ inner_s ~ "\"" }
char    =  { "'" ~ single_char ~ "'" }

inner_s     = @{ single_char* }
single_char =  {
	!("\"" | "\\") ~ ANY
	| "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
	| "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

declaration = { var_name ~ ws ~ ":" ~ ws ~ type_name? ~ ws ~ "=" ~ ws ~ subexpr }
assignment  = { var_name ~ ws ~ operator? ~ "=" ~ ws ~ subexpr }

function_call = { var_name ~ ws ~ "(" ~ ws ~ ((subexpr ~ ws ~ "," ~ ws)* ~ ws ~ subexpr)? ~ ws ~ ")" }

term = {
	float
	| integer
	| boolean
	| unit
	| tuple
	| "(" ~ ws ~ subexpr ~ ws ~ ")"
	| block
	| if_expr
	| function_call
	| string
	| char
	| var_name
}
operator = { exp | times | div | plus | minus | delta }

if_expr = { ("?" | "if" | "`if`" ) ~ ws ~ subexpr ~ ws ~ block ~ ws ~ ("|" | "else" | "`else`" ) ~ ws ~ (block | if_expr) }
subexpr = { term ~ (ws ~ operator ~ ws ~ term)* }
expr    = { declaration | assignment | subexpr }

fn_keyword = { "\\" | "λ" | "fn" }
argument   = { var_name ~ ws ~ ":" ~ ws ~ type_name }

function_definition = {
	fn_keyword ~ ws ~ var_name ~ ws ~ "(" ~ ws ~
	((argument ~ ws ~ "," ~ ws)* ~ argument)* ~ ws ~
	")" ~ ws ~ (("->" | "→") ~ ws ~ raw_type)? ~ ws ~ block
}
block = { "{" ~ ws ~ (expr ~ (("\n" | "\r\n" | ";")+ ~ ws ~ expr)*) ~ ws ~ "}" }

struct_enum_field = { var_name ~ ws ~ ":" ~ ws ~ raw_type }
struct_definition = {
	(times | "struct") ~ ws ~ struct_name ~ ws ~ "{" ~ ws ~
	((struct_enum_field ~ ws ~ "," ~ ws)* ~ struct_enum_field)* ~ ws ~ "}"
}
enum_definition = {
	(plus  | "enum") ~ ws ~ struct_name ~ ws ~ "{" ~ ws ~
	((struct_enum_field ~ ws ~ "," ~ ws)* ~ struct_enum_field)* ~ ws ~ "}"
}
