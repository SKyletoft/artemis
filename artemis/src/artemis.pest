lower_case =  { 'a'..'z' | "√•" | "√§" | "√∂" }
upper_case =  { 'A'..'Z' | "√Ö" | "√Ñ" | "√ñ" }
digit      =  { '0'..'9' }
whitespace = _{ (" " | "\t" | "\r" | "\n")+ }
greek      =  {
	"Œ±" | "Œ≤" | "Œì" | "Œ≥" | "Œµ" | "Œ∂" | "Œ∑" | "Œò" | "Œ∏" | "Œπ" | "Œö" |
	"Œ∫" | "Œº" | "ŒΩ" | "Œû" | "Œæ" | "Œ†" | "œÄ" | "œÅ" | "Œ£" | "œÉ" | "œÇ" |
	"œÑ" | "œÖ" | "Œ¶" | "œÜ" | "Œß" | "œá" | "Œ®" | "œà" | "Œ©" | "œâ"
}

large_metric_prefix = { "D" | "da"| "h" | "k" | "M" | "G" | "T" | "P" | "E" | "Z" | "Y" }
small_metric_prefix = { "d" | "c" | "m" | "Œº" | "u" | "n" | "p" | "f" | "a" | "z" | "y" }
metrix_prefix       = { small_metric_prefix | large_metric_prefix }
binary_prefix       = { "ki" | "Mi" | "Gi" | "Ti" | "Pi" | "Ei" | "Zi" | "Yi" }
prefix              = { metrix_prefix | binary_prefix }

ws = _{ whitespace? }

var_name     = { (lower_case ~ (lower_case | digit | "_")*) | greek }
type_name    = { (mutable ~ whitespace)? ~ enum_type }
mutable      = { "mut" }
raw_type     = { native_types | struct_name | unit | tuple_type | struct_type }
native_types = { "‚Ñï" | "‚Ñù" | "‚Ñ§" | "ùîπ" | "‚àÄ" | "‚àÉ" | "ùïã" }
struct_name  = { upper_case ~ (upper_case | lower_case | digit)* }
tuple_type   = { "(" ~ ws ~ type_name ~ (ws ~ "," ~ ws ~ type_name)+ ~ ws ~ ")" }

dot        = { "." | "`dot`" }
plus       = { "+" | "`add`" }
minus      = { "-" | "`sub`" }
delta      = { "Œ¥" | "`delta`" }
times      = { "*" | "√ó" | "¬∑" | "`mul`" }
div        = { "/" | "√∑" | "`div`" }
rem        = { "%" | "`mod`" | "`rem`" }
exp        = { "^" | "`exp`" }
not        = { "¬¨" | "`not`" }
and        = { "Œõ" | "‚àß" | "‚ãÄ" | "`and`" }
or         = { "V" | "‚à®" | "‚ãÅ" | "`or`" }
xor        = { "‚äï" | "‚äª" | "‚®Å" | "(+)" | "`xor`" }
lshift     = { "<<" | "`lshift`" }
rshift     = { ">>" | "`rshift`" }
eq         = { "==" | "`eq`" }
greater    = { ">" | "`gt`" }
less       = { "<" | "`lt`" }
greater_eq = { ">=" | "`gte`" }
less_eq    = { "<=" | "`lte`" }
neq        = { "¬¨=" | "‚â†" | "`neq`" }
lpipe      = { "|>" }
rpipe      = { "<|" }

integer =  { (plus | minus)? ~ digit+ ~ prefix? }
float   =  { (plus | minus)? ~ digit+ ~ dot ~ digit* ~ prefix? }
boolean =  { "true" | "false" }
unit    =  { "(" ~ ws ~ ")" }
tuple   =  { "(" ~ ws ~ expr ~ (ws ~ "," ~ ws ~ expr)+ ~ ws ~ ")" }
string  = ${ "\"" ~ inner_s ~ "\"" }
char    =  { "'" ~ single_char ~ "'" }

inner_s     = @{ single_char* }
single_char =  {
	!("\"" | "\\") ~ ANY
	| "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
	| "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

declaration   = { pattern ~ ws ~ ":" ~ ws ~ type_name? ~ ws ~ "=" ~ ws ~ expr }
assignment    = { var_name ~ ws ~ binary_operator? ~ "=" ~ ws ~ expr }
function_call = {
	var_name ~ (" " | "\t" | "\r")* ~ "(" ~ ws ~
	(expr ~ ws ~ ("," ~ ws ~ expr ~ ws)* ~ ","? ~ ws)? ~
	")"
}

if_expr = {
	("?" | "if" | "`if`" ) ~ ws ~ expr ~ ws ~
	expr ~ ws ~
	("|" | "else" | "`else`" ) ~ ws ~ expr
}
match_expr = {
	"case" ~ ws ~ expr ~ ws ~ case+
}
case = {
	pattern ~ ws ~ ("|" ~ ws ~ expr)? ~ ws ~ arrow ~ ws ~ expr ~ ws
}

pattern = {
	(var_name ~ ws ~ "@" ~ ws)?
	~ struct_pattern
	| tuple_pattern
	| float
	| integer
	| boolean
	| string
	| char
	| var_name
	| "_"
}
struct_pattern = {
	"{" ~ var_name ~ ws ~ (":" ~ ws ~ pattern)?
	~ (
		"," ~ ws ~ var_name ~ ws ~ (":" ~ ws ~ pattern)?
	)* ~ ("," ~ (ws ~ "..")?)? ~ ws ~ "}"
}
tuple_pattern = {
	"(" ~ pattern ~ ws ~ ("," ~ ws ~ pattern)+ ~ ","? ~ ")"
}

subexpr = { term ~ (ws ~ binary_operator ~ ws ~ term)* }
unary_expr = { unary_operator ~ ws ~ term }
expr = {
	declaration
	| assignment
	| subexpr
	| unary_expr
	| function_definition
	| type_alias
}

term = {
	float
	| integer
	| boolean
	| string
	| char
	| unit
	| tuple
	| struct_literal
	| block
	| if_expr
	| function_call
	| declaration
	| assignment
	| var_name
}

binary_operator = {
	exp
	| times
	| div
	| plus
	| minus
	| delta
	| and
	| or
	| xor
	| dot
	| lshift
	| rshift
	| eq
	| neq
	| greater
	| less
	| greater_eq
	| less_eq
	| lpipe
	| rpipe
}
unary_operator  = { not | minus }

fn_keyword = { "\\" | "Œª" | "fn" }
argument   = { var_name ~ ws ~ ":" ~ ws ~ type_name }

arrow = { "‚Üí" | "->" }
function_definition = {
	fn_keyword ~ ws ~ var_name ~ ws ~ "(" ~ ws ~
	(
		argument ~ ws ~
		("," ~ ws ~ argument ~ ws)* ~ ","? ~ ws
	)? ~
	")" ~ ws ~ (arrow ~ ws ~ raw_type)? ~ ws ~ "=" ~ ws ~ expr
}
block = { "{" ~ ws ~ (expr ~ (("\n" | "\r\n" | ";")+ ~ ws ~ expr)*) ~ ws ~ "}" }

struct_field = { var_name ~ (ws ~ ":" ~ ws ~ enum_type)? }
struct_type = {
	"{" ~ ws ~
	(struct_field ~ ws ~ "," ~ ws)* ~ (struct_field ~ ws)? ~
	"}"
}
enum_type = { raw_type ~ (ws ~ "|" ~ ws ~ raw_type)* }

type_alias = { struct_name ~ ws ~ ":" ~ ws ~ ("mut"? ~ ws ~ "Type")? ~ ws ~ "=" ~ ws ~ enum_type }

struct_field_use = { var_name ~ ws ~ ":" ~ ws ~ expr }
struct_literal = {
	"{" ~ ws ~
	struct_field_use ~ ws ~
	("," ~ ws ~ struct_field_use ~ ws)* ~ ","? ~ ws ~
	"}"
}

top = { SOI ~ ws ~ (expr ~ ws)* ~ ws ~ EOI }

